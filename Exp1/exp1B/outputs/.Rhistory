library('rjags')
?jags.samples
N <- 1000
N
x
x <- rnorm(N, 0, 5)
x
model {
for (i in 1:N) {
x[i] ~ dnorm(mu, tau)
}
mu ~ dnorm(0, .0001)
tau <- pow(sigma, -2)
sigma ~ dunif(0, 100)
}
bayes.mod <- {
for (i in 1:N) {
x[i] ~ dnorm(mu, tau)
}
mu ~ dnorm(0, .0001)
tau <- pow(sigma, -2)
sigma ~ dunif(0, 100)
}
?pow
??pow
bayes.mod <- function() {
for (i in 1:N) {
x[i] ~ dnorm(mu, tau)
}
mu ~ dnorm(0, .0001)
tau <- pow(sigma, -2)
sigma ~ dunif(0, 100)
}
jags <- jags.model('example1.bug',
data = list('x' = x, 'N' = N),
n.chains = 4,
n.adapt = 100)
jags <- jags.model(bayes.mod,
data = list('x' = x, 'N' = N),
n.chains = 4,
n.adapt = 100)
ln(10)
log(10)
log(10)/log(10)
log(100)/log(10)
list <- seq(1,100,0.1)
list
plot(list,log(list),'line')
plot(list,log(list),'l')
plot(list,log(list),'l')
library(statsr)
library(dplyr)
library(ggplot2)
library(shiny)
install_github("StatsWithR/statsr")
install.packages("statsr")
library(devtools)
install_github("StatsWithR/statsr")
install_github("StatsWithR/statsr")
sum(dbinom(0:4,size=20,p=0.5))
library(statsr)
library(dplyr)
library(ggplot2)
library(shiny)
detach(httpuv)
detach("httpuv")
detach("package:httpuv", unload=TRUE)
detach("httpuv", unload=TRUE)
install.packages("httpuv")
install.packages("httpuv")
library(statsr)
library(dplyr)
library(ggplot2)
library(shiny)
binom(4,20,0.5)
dbinom(4,20,0.5)
dbinom(4,20,0.7)
dbinom(4,20,1)
dbinom(4,20,0.9)
dbinom(4,20,0.99)
dbinom(4,20,0.999999)
dbinom(4,20,0.99999999999)
dbinom(4,20,0.9999999999999999)
dbinom(4,20,0.9999999999999999999999999999)
dbinom(4,20,0.9999999999999999999999999)
dbinom(4,20,0.9999999999999999999999)
dbinom(4,20,0.999999999999999999)
dbinom(4,20,0.999999999999999)
p <- seq(0.1,0.9,0.1)
dbinom(4,20,p)
k <- 0:4
dbinom(k,300,0.01)
1-sum(dbinom(k,300,0.01))
(0.999^10)*0.5/(0.5*0.999^10+0.5*0.999999^10)
prior <- c(0.2,0.3,0.3,0.1,0.02,0.02,0.02,0.02,0.02)
likelihood <- c(0,0.005,0.03,0.1,0.2,0.25,0.2,0.08,0.01)
(likelihood*prior)
(likelihood*prior)/sum((likelihood*prior))
19/36
8/15
12/22
dpois(3,10)
dpois(2,10)
dpois(1,10)
dpois(1:3,10)
dpois(3,10)/sum(dpois(1:3,10))
dpois(10,3)/sum(dpois(10,1:3))
6/11
rep(1/9,9)
prior <- rep(1/9,9)
p <- 1:9
p <- p/10^8
p
likelihook <- dbinom(3,413271201,p)
likelihood <- dbinom(3,413271201,p)
prior*likelihood /sum(prior*likelihood)
posteriors <- prior*likelihood /sum(prior*likelihood)
sum(posteriors[1:5])
sum(posteriors)
prior <- rep(1/16,9)
prior[5] <- 0.5
sum(prior)
posteriors <- prior*likelihood /sum(prior*likelihood)
sum(posteriors[1:5])
1/100000000
likelihood
likelihood*1/9/sum(prior*likelihood)
posteriors <- likelihood*1/9/sum(prior*likelihood)
posteriors[1:5]
sum(posteriors[1:5])
prior <- rep(1/9,9)
p <- 1:9
p <- p/100000000
likelihood <- dbinom(3,size=413271201 ,prob=p)
pdata <- sum(likelihood) * 1/9
(prior*likelihood)/pdata
posteriors <- (prior*likelihood)/pdata
sum(posteriors[1:5])
posteriors[1]
p
p <- rep(10exp(-8),9)
p <- rep(10^(-8),9)
p
p <- rep(10^(8),9)
p <- rep(10^(8),9) * 1:9
p
p <- 1/p
likelihood <- dbinom(3,size=413271201 ,prob=p)
posteriors <- (prior*likelihood)/pdata
pdata <- sum(likelihood) * 1/9
posteriors <- (prior*likelihood)/pdata
sum(posteriors[1:5])
#################################################
############## GENERAL SETUP
#clear workspace:
rm(list=ls())
#set working directory
setwd("~/Dropbox/academia/experimentals/processing/analyse-process/ISA/targetDiscrimination/outputs/")
#load libraries
library(R2jags)
library(polspline)
library(stats)
library(plyr)
library(LaplacesDemon)
library(gridExtra)
library(ggplot2)
figName <- "figName1"
load('jagsVar1Blong.rData')
#determine number of bins
numbBins <- 8
#set vars
priorwidth = 0.707
#################################################
############## GO-GO GGPLOT
legendSize  <- 12
labelList   <- c("Irr. Cue Cond","Rel. Cue Cond")
alphaRange <- seq(-3.2,2,0.01) #create range for plotting
ypriorSR    <- dcauchy( alphaRange, location = 0, scale = priorwidth )
ypriorVP    <- dcauchy( alphaRange, location = alphaOffset, scale = priorwidth )
yposterior  <- dlogspline( alphaRange, logspline(jagsRawData$mu.delta.alpha) )
#data frame for plotting
xList       <- as.double(c(alphaRange,alphaRange,alphaRange))
yList       <- c(ypriorSR,ypriorVP,yposterior)
coding      <- as.factor(c(rep(1,length(alphaRange)),rep(2,length(alphaRange)),rep(3,length(alphaRange))))
resultFrame <- data.frame(x=xList,y=yList,coding=coding)
pointsFrame <- data.frame(xPoints=c(0,0,alphaOffset,alphaOffset),yPoints=with(jagsHypData,c(postSR,priorSR,postVP,priorVP)))
bayesLabels <- c("Readiness Prior","Visual Prior","Posterior")
(plot1 <- ggplot(resultFrame,aes(y=y,x=x,color=coding))
+ geom_vline(xintercept=alphaOffset,color="grey",linetype="dashed",size=0.5,show.legend=F)
+ geom_vline(xintercept=0,color="grey",linetype="dashed",size=0.5)
+ geom_line(aes(linetype=coding,group=coding),size=1.5)
+ scale_linetype_manual(name=NULL,values=c("dotdash","longdash","solid"),labels=bayesLabels)
+ scale_color_manual(name=NULL,values = c("cyan", "magenta","green"),labels=bayesLabels)
+ xlim(min(alphaRange), max(alphaRange))
+ geom_point(data=pointsFrame,aes(x=xPoints,y=yPoints),colour="grey",size=2.5)
+ labs(x="Delta Alpha",y="Density")
+ theme_bw() + theme(
legend.key.size = unit(1.5,"line"), legend.key.width = unit(0.4,"in"),
legend.position = c(0.215, 0.8),  legend.text = element_text(size=legendSize),
legend.box.background = element_rect(colour="black"),
axis.line.y = element_line(), axis.text = element_text(size=10),
axis.line.x = element_line(), axis.title =element_text(size=14),
axis.title.x = element_text(margin = unit(c(5, 0, 0, 0), "mm")),
axis.title.y = element_text(margin = unit(c(0, 5, 0, 0), "mm")),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )
)
expr1 <- function(x) 1/(1+exp( -( (median(jagsRawData$mu.alpha)-median(jagsRawData$mu.delta.alpha)/2) + (median(jagsRawData$mu.beta) * x) ) ) )
expr2 <- function(x) 1/(1+exp( -( (median(jagsRawData$mu.alpha)+median(jagsRawData$mu.delta.alpha)/2) + (median(jagsRawData$mu.beta) * x) ) ) )
xMin <- -100; xMax <- 150
xRange <- seq(xMin,xMax,0.1)
fittedData <- data.frame(x=c(xRange,xRange),y=c(expr1(xRange),expr2(xRange)),coding=c(rep(22,length(xRange)),rep(23,length(xRange))))
#condition labels
labelList <- c("Irrelevant Cue Cond.","Relevant Cue Cond.")
#ggplot component
(plot2 <- ggplot(fittedData,aes(y=y,x=x,color=as.factor(coding)))
+ geom_point(data=performanceFrame,aes(x=latBins,y=perfBins,color=as.factor(coding),shape=as.factor(coding)),size=2.5)
+ geom_line(aes(linetype=as.factor(coding)),size=1.3)
+ scale_linetype_manual(name=NULL,values=c("solid","dotdash"),labels=labelList)
+ scale_shape_manual(name=NULL,values = c(16,17),labels=labelList)
+ scale_color_manual(name=NULL,values = c("grey65", "grey45"),labels=labelList)
+ xlim(xMin, xMax) + ylim(0.2, 1.01)
+ labs(x="Latency (ms)",y="Accuracy")
+ theme_bw() + theme(
legend.key.size = unit(1.5,"line"), legend.key.width = unit(0.4,"in"),
legend.position = c(0.7, 0.2),  legend.text = element_text(size=legendSize),
legend.box.background = element_rect(colour="black"),
axis.line.y = element_line(), axis.text = element_text(size=14),
axis.line.x = element_line(), axis.title =element_text(size=15),
axis.title.x = element_text(margin = unit(c(5, 0, 0, 0), "mm")),
axis.title.y = element_text(margin = unit(c(0, 5, 0, 0), "mm")),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )
)
grid.arrange(plot1,plot2,ncol=2)
figFileName <- paste(figName,".pdf", sep = "")
ggsave(figFileName,arrangeGrob(plot1, plot2, ncol=2),width=15,height=5)
print(bayesFactors)

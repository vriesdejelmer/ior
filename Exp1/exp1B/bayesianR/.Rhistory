load('../outputs/data/jagsOutput1A.rData')
subjSumm <- getSubjectLatData(expData)
performanceFrame <- caclulateMeanCenteredPerformanceFrame(expData, 10)
posteriorPlot <- plotPosteriors(jagsRawData, expData)
fittingPlot <- plotFits(jagsRawData, performanceFrame, subjSumm$subjectMeans)
plot1 <- arrangeGrob(posteriorPlot, top = textGrob("A", x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
plot2 <- arrangeGrob(fittingPlot, top = textGrob("B", x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
grid.arrange(plot1,plot2,ncol=2)
figFileName <- "../outputs/manuscriptFigures/figure6.pdf"
ggsave(figFileName,arrangeGrob(plot1, plot2, ncol=2),width=15,height=5)
print(bayesFactors)
#################################################
############## GENERAL SETUP
#clear workspace:
rm(list=ls())
#set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load libraries
source("../../rFunctions/JagsModelFunctionsExp1.R")
source("../../rFunctions/PlottingPosteriorsExp1.R")
#set constants (from matlabConstants)
CONDITION_REL <- 21; lockBinding("CONDITION_REL", globalenv())
CONDITION_IRR <- 22; lockBinding("CONDITION_IRR", globalenv())
CONDITION_SHORT <- 0.6; lockBinding("CONDITION_SHORT", globalenv())
CONDITION_LONG <- 1; lockBinding("CONDITION_LONG", globalenv())
#chains, iterations, etc
nChains <- 3
nIter   <- 100000
nBurn   <- 1000
nThin   <- 10
#base values for chain initilization
init.delta.alpha        <- -0.5; init.delta.alpha.sd <- 0.1
init.alpha              <- -5; init.alpha.sd       <- 0.5
init.beta               <- 0;  init.beta.sd        <- 0.03
#load data
expData <- read.table( "../outputs/data/dataForR.dat", as.is=TRUE )
names(expData) <- c('subject','condition','subCondition','latency','response')
expData <- recodeResponses(expData)
modelFile <- "../../rFunctions/jagsModel1B.txt"
#################################################
############## ANALYSIS LOOP
#run for both the short and long CTOA subcondition
subCondList <- unique(expData$subCondition)
for( subCond in subCondList ) {
if( subCond==CONDITION_LONG ) {
print('LONG')
versionID       <- '1B_long'
} else if( subCond==CONDITION_SHORT ) {
print('SHORT')
versionID       <- '1B_short'
}
#create subsection for the two subconditions
conditionData <- expData[expData$subCondition==subCond,]
jagsData <- prepareData(conditionData)
set.seed(1234)
samples <- jagsSimulation(jagsData, modelFile, nChains, nIter, nBurn, nThin)
muSamples <- fetchMetaSamples(samples)
bayesFactors <- calculateBayesFactors(muSamples, conditionData)
save(muSamples ,file=paste("../outputs/muSamples", versionID, ".rData", sep=""))
#if we're running on the server we save the whole data-file for safekeeping
if( dir.exists("../outputs/serverOnly/")) {
save(samples, file=paste("../outputs/serverOnly/samples", versionID, ".rData", sep=""))
}
saveSamples(muSamples, bayesFactors, versionID)
samplesMCMC <- as.mcmc(samples)
saveChainPlots(samples, samplesMCMC, versionID)
}
subCondList
#################################################
############## GENERAL SETUP
#clear workspace:
rm(list=ls())
#set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load libraries
source("../../rFunctions/JagsModelFunctionsExp1.R")
source("../../rFunctions/PlottingPosteriorsExp1.R")
#set constants (from matlabConstants)
CONDITION_REL <- 21; lockBinding("CONDITION_REL", globalenv())
CONDITION_IRR <- 22; lockBinding("CONDITION_IRR", globalenv())
CONDITION_SHORT <- 0.6; lockBinding("CONDITION_SHORT", globalenv())
CONDITION_LONG <- 1; lockBinding("CONDITION_LONG", globalenv())
#chains, iterations, etc
nChains <- 3
nIter   <- 100000
nBurn   <- 1000
nThin   <- 10
#base values for chain initilization
init.delta.alpha        <- -0.5; init.delta.alpha.sd <- 0.1
init.alpha              <- -5; init.alpha.sd       <- 0.5
init.beta               <- 0;  init.beta.sd        <- 0.03
#load data
expData <- read.table( "../data/dataForR.dat", as.is=TRUE )
names(expData) <- c('subject','condition','subCondition','latency','response')
expData <- recodeResponses(expData)
modelFile <- "../../rFunctions/jagsModel1B.txt"
#################################################
############## ANALYSIS LOOP
#run for both the short and long CTOA subcondition
subCondList <- unique(expData$subCondition)
for( subCond in subCondList ) {
if( subCond==CONDITION_LONG ) {
print('LONG')
versionID       <- '1B_long'
} else if( subCond==CONDITION_SHORT ) {
print('SHORT')
versionID       <- '1B_short'
}
#create subsection for the two subconditions
conditionData <- expData[expData$subCondition==subCond,]
jagsData <- prepareData(conditionData)
set.seed(1234)
samples <- jagsSimulation(jagsData, modelFile, nChains, nIter, nBurn, nThin)
muSamples <- fetchMetaSamples(samples)
bayesFactors <- calculateBayesFactors(muSamples, conditionData)
save(muSamples ,file=paste("../outputs/muSamples", versionID, ".rData", sep=""))
#if we're running on the server we save the whole data-file for safekeeping
if( dir.exists("../outputs/serverOnly/")) {
save(samples, file=paste("../outputs/serverOnly/samples", versionID, ".rData", sep=""))
}
saveSamples(muSamples, bayesFactors, versionID)
samplesMCMC <- as.mcmc(samples)
saveChainPlots(samples, samplesMCMC, versionID)
}
#################################################
############## GENERAL SETUP
#clear workspace:
rm(list=ls())
#set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load libraries
source("../../rFunctions/DataProcessingExp1.R")
source("../../rFunctions/JagsModelFunctionsExp1.R")
source("../../rFunctions/PlottingPosteriorsExp1.R")
#set constants (from matlabConstants)
CONDITION_REL <- 21; lockBinding("CONDITION_REL", globalenv())
CONDITION_IRR <- 22; lockBinding("CONDITION_IRR", globalenv())
CONDITION_SHORT <- 0.6; lockBinding("CONDITION_SHORT", globalenv())
CONDITION_LONG <- 1; lockBinding("CONDITION_LONG", globalenv())
#chains, iterations, etc
nChains <- 3
nIter   <- 100000
nBurn   <- 1000
nThin   <- 10
#base values for chain initilization
init.delta.alpha        <- -0.5; init.delta.alpha.sd <- 0.1
init.alpha              <- -5; init.alpha.sd       <- 0.5
init.beta               <- 0;  init.beta.sd        <- 0.03
#load data
expData <- read.table( "../data/dataForR.dat", as.is=TRUE )
names(expData) <- c('subject','condition','subCondition','latency','response')
expData <- recodeResponses(expData)
modelFile <- "../../rFunctions/jagsModel1B.txt"
#################################################
############## ANALYSIS LOOP
#run for both the short and long CTOA subcondition
subCondList <- unique(expData$subCondition)
for( subCond in subCondList ) {
if( subCond==CONDITION_LONG ) {
print('LONG')
versionID       <- '1B_long'
} else if( subCond==CONDITION_SHORT ) {
print('SHORT')
versionID       <- '1B_short'
}
#create subsection for the two subconditions
conditionData <- expData[expData$subCondition==subCond,]
jagsData <- prepareData(conditionData)
set.seed(1234)
samples <- jagsSimulation(jagsData, modelFile, nChains, nIter, nBurn, nThin)
muSamples <- fetchMetaSamples(samples)
bayesFactors <- calculateBayesFactors(muSamples, conditionData)
save(muSamples ,file=paste("../outputs/muSamples", versionID, ".rData", sep=""))
#if we're running on the server we save the whole data-file for safekeeping
if( dir.exists("../outputs/serverOnly/")) {
save(samples, file=paste("../outputs/serverOnly/samples", versionID, ".rData", sep=""))
}
saveSamples(muSamples, bayesFactors, versionID)
samplesMCMC <- as.mcmc(samples)
saveChainPlots(samples, samplesMCMC, versionID)
}
#################################################
############## GENERAL SETUP
#clear workspace:
rm(list=ls())
#set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load libraries
source("../../rFunctions/DataProcessingExp1.R")
source("../../rFunctions/JagsModelFunctionsExp1.R")
source("../../rFunctions/PlottingPosteriorsExp1.R")
#set constants (from matlabConstants)
CONDITION_REL <- 21; lockBinding("CONDITION_REL", globalenv())
CONDITION_IRR <- 22; lockBinding("CONDITION_IRR", globalenv())
CONDITION_SHORT <- 0.6; lockBinding("CONDITION_SHORT", globalenv())
CONDITION_LONG <- 1; lockBinding("CONDITION_LONG", globalenv())
#chains, iterations, etc
nChains <- 3
nIter   <- 100000
nBurn   <- 1000
nThin   <- 10
#base values for chain initilization
init.delta.alpha        <- -0.5; init.delta.alpha.sd <- 0.1
init.alpha              <- -5; init.alpha.sd       <- 0.5
init.beta               <- 0;  init.beta.sd        <- 0.03
#load data
expData <- read.table( "../data/dataForR.dat", as.is=TRUE )
names(expData) <- c('subject','condition','subCondition','latency','response')
expData <- recodeResponses(expData)
modelFile <- "../../rFunctions/jagsModel.txt"
#################################################
############## ANALYSIS LOOP
#run for both the short and long CTOA subcondition
subCondList <- unique(expData$subCondition)
for( subCond in subCondList ) {
if( subCond==CONDITION_LONG ) {
print('LONG')
versionID       <- '1B_long'
} else if( subCond==CONDITION_SHORT ) {
print('SHORT')
versionID       <- '1B_short'
}
#create subsection for the two subconditions
conditionData <- expData[expData$subCondition==subCond,]
jagsData <- prepareData(conditionData)
set.seed(1234)
samples <- jagsSimulation(jagsData, modelFile, nChains, nIter, nBurn, nThin)
muSamples <- fetchMetaSamples(samples)
bayesFactors <- calculateBayesFactors(muSamples, conditionData)
save(muSamples ,file=paste("../outputs/muSamples", versionID, ".rData", sep=""))
#if we're running on the server we save the whole data-file for safekeeping
if( dir.exists("../outputs/serverOnly/")) {
save(samples, file=paste("../outputs/serverOnly/samples", versionID, ".rData", sep=""))
}
saveSamples(muSamples, bayesFactors, versionID)
samplesMCMC <- as.mcmc(samples)
saveChainPlots(samples, samplesMCMC, versionID)
}
#################################################
############## GENERAL SETUP
#clear workspace:
rm(list=ls())
#set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load libraries
source("../../rFunctions/DataProcessingExp1.R")
source("../../rFunctions/JagsModelFunctionsExp1.R")
source("../../rFunctions/PlottingPosteriorsExp1.R")
#set constants (from matlabConstants)
CONDITION_REL <- 21; lockBinding("CONDITION_REL", globalenv())
CONDITION_IRR <- 22; lockBinding("CONDITION_IRR", globalenv())
CONDITION_SHORT <- 0.6; lockBinding("CONDITION_SHORT", globalenv())
CONDITION_LONG <- 1; lockBinding("CONDITION_LONG", globalenv())
#chains, iterations, etc
nChains <- 3
nIter   <- 100000
nBurn   <- 1000
nThin   <- 10
#base values for chain initilization
init.delta.alpha        <- -0.5; init.delta.alpha.sd <- 0.1
init.alpha              <- -5; init.alpha.sd       <- 0.5
init.beta               <- 0;  init.beta.sd        <- 0.03
#load data
expData <- read.table( "../data/dataForR.dat", as.is=TRUE )
names(expData) <- c('subject','condition','subCondition','latency','response')
expData <- recodeResponses(expData)
modelFile <- "../../rFunctions/jagsModel.txt"
#################################################
############## ANALYSIS LOOP
#run for both the short and long CTOA subcondition
subCondList <- unique(expData$subCondition)
for( subCond in subCondList ) {
if( subCond==CONDITION_LONG ) {
print('LONG')
versionID       <- '1B_long'
} else if( subCond==CONDITION_SHORT ) {
print('SHORT')
versionID       <- '1B_short'
}
#create subsection for the two subconditions
conditionData <- expData[expData$subCondition==subCond,]
jagsData <- prepareData(conditionData)
set.seed(1234)
samples <- jagsSimulation(jagsData, modelFile, nChains, nIter, nBurn, nThin)
muSamples <- collectMetaSamples(samples)
bayesFactors <- calculateBayesFactors(muSamples, conditionData)
save(muSamples ,file=paste("../outputs/muSamples", versionID, ".rData", sep=""))
#if we're running on the server we save the whole data-file for safekeeping
if( dir.exists("../outputs/serverOnly/")) {
save(samples, file=paste("../outputs/serverOnly/samples", versionID, ".rData", sep=""))
}
saveSamples(muSamples, bayesFactors, versionID)
samplesMCMC <- as.mcmc(samples)
saveChainPlots(samples, samplesMCMC, versionID)
}
#clear workspace:
rm(list=ls())
#set working directory
setwd("~/Dropbox/academia/experimentals/processing/analyse-process/ISA/exp1B/bayesianR/")
#init constants coding (copied from matlab files)
CONDITION_REL <- 21; lockBinding("CONDITION_REL", globalenv())
CONDITION_IRR <- 22; lockBinding("CONDITION_IRR", globalenv())
CONDITION_SHORT <- 0.6; lockBinding("CONDITION_SHORT", globalenv())
CONDITION_LONG <- 1; lockBinding("CONDITION_LONG", globalenv())
library(ggplot2)
library(grid)
library(gridExtra)
source("../../rFunctions/PlottingPosteriorsExp1.R")
source("../../rFunctions/DataProcessingExp1.R")
source("../../rFunctions/JagsModelFunctionsExp1.R")
#load data
expData <- read.table( "../outputs/data/dataForR.dat", as.is=TRUE )
names(expData) <- c('subject','condition','subCondition','latency','response')
expData <- recodeResponses(expData)
plot1 <- vector("list", 4); plot2 <- vector("list",2)
#run for both the short and long CTOA subcondition
subCondList <- unique(expData$subCondition)
for( subCond in subCondList ) {
#create subsection for the two subconditions
conditionData <- expData[expData$subCondition==subCond,]
if( subCond==CONDITION_SHORT ) {
print('SHORT')
versionID       <- '1B_short'
plotCount       <- 1
figIndicators   <-c('A','B')
} else if( subCond==CONDITION_LONG ) {
print('LONG')
versionID       <- '1B_long'
plotCount       <- 2
figIndicators   <-c('C','D')
}
load(paste('../outputs/data/jagsOutput', versionID ,'.rData',sep=""))
subjSumm <- getSubjectLatData(conditionData)
performanceFrame <- caclulateMeanCenteredPerformanceFrame(conditionData, numbBins=8)
print(performanceFrame)
posteriorPlot <- plotPosteriors(jagsRawData, conditionData)
fittingPlot <- plotFits(jagsRawData, performanceFrame, subjSumm$subjectMeans, xMinAxis=150, xMaxAxis=400)
plot1[[plotCount]] <- arrangeGrob(posteriorPlot, top = textGrob(figIndicators[1], x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
plot2[[plotCount]] <- arrangeGrob(fittingPlot, top = textGrob(figIndicators[2], x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
grid.arrange(plot1[[plotCount]],plot2[[plotCount]],ncol=2)
print(bayesFactors)
}
figFileName <- "../outputs/manuscriptFigures/figure10.pdf"
ggsave(figFileName,arrangeGrob(plot1[[1]],plot2[[1]],plot1[[2]],plot2[[2]], ncol=2, nrow=2),width=15,height=10)
#grid.arrange(plot1[[1]],plot2[[1]],plot1[[2]],plot2[[2]],ncol=2,nrow=2)
#clear workspace:
rm(list=ls())
#set working directory
setwd("~/Dropbox/academia/experimentals/processing/analyse-process/ISA/exp1B/bayesianR/")
#init constants coding (copied from matlab files)
CONDITION_REL <- 21; lockBinding("CONDITION_REL", globalenv())
CONDITION_IRR <- 22; lockBinding("CONDITION_IRR", globalenv())
CONDITION_SHORT <- 0.6; lockBinding("CONDITION_SHORT", globalenv())
CONDITION_LONG <- 1; lockBinding("CONDITION_LONG", globalenv())
library(ggplot2)
library(grid)
library(gridExtra)
source("../../rFunctions/PlottingPosteriorsExp1.R")
source("../../rFunctions/DataProcessingExp1.R")
source("../../rFunctions/JagsModelFunctionsExp1.R")
#load data
expData <- read.table( "../data/dataForR.dat", as.is=TRUE )
names(expData) <- c('subject','condition','subCondition','latency','response')
expData <- recodeResponses(expData)
plot1 <- vector("list", 4); plot2 <- vector("list",2)
#run for both the short and long CTOA subcondition
subCondList <- unique(expData$subCondition)
for( subCond in subCondList ) {
#create subsection for the two subconditions
conditionData <- expData[expData$subCondition==subCond,]
if( subCond==CONDITION_SHORT ) {
print('SHORT')
versionID       <- '1B_short'
plotCount       <- 1
figIndicators   <-c('A','B')
} else if( subCond==CONDITION_LONG ) {
print('LONG')
versionID       <- '1B_long'
plotCount       <- 2
figIndicators   <-c('C','D')
}
load(paste('../outputs/data/jagsOutput', versionID ,'.rData',sep=""))
subjSumm <- getSubjectLatData(conditionData)
performanceFrame <- caclulateMeanCenteredPerformanceFrame(conditionData, numbBins=8)
print(performanceFrame)
posteriorPlot <- plotPosteriors(jagsRawData, conditionData)
fittingPlot <- plotFits(jagsRawData, performanceFrame, subjSumm$subjectMeans, xMinAxis=150, xMaxAxis=400)
plot1[[plotCount]] <- arrangeGrob(posteriorPlot, top = textGrob(figIndicators[1], x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
plot2[[plotCount]] <- arrangeGrob(fittingPlot, top = textGrob(figIndicators[2], x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
grid.arrange(plot1[[plotCount]],plot2[[plotCount]],ncol=2)
print(bayesFactors)
}
figFileName <- "../outputs/manuscriptFigures/figure10.pdf"
ggsave(figFileName,arrangeGrob(plot1[[1]],plot2[[1]],plot1[[2]],plot2[[2]], ncol=2, nrow=2),width=15,height=10)
grid.arrange(plot1[[1]],plot2[[1]],plot1[[2]],plot2[[2]],ncol=2,nrow=2)
#clear workspace:
rm(list=ls())
#set working directory
setwd("~/Dropbox/academia/experimentals/processing/analyse-process/ISA/exp1B/bayesianR/")
#init constants coding (copied from matlab files)
CONDITION_REL <- 21; lockBinding("CONDITION_REL", globalenv())
CONDITION_IRR <- 22; lockBinding("CONDITION_IRR", globalenv())
CONDITION_SHORT <- 0.6; lockBinding("CONDITION_SHORT", globalenv())
CONDITION_LONG <- 1; lockBinding("CONDITION_LONG", globalenv())
library(ggplot2)
library(grid)
library(gridExtra)
source("../../rFunctions/PlottingPosteriorsExp1.R")
source("../../rFunctions/DataProcessingExp1.R")
source("../../rFunctions/JagsModelFunctionsExp1.R")
#load data
expData <- read.table( "../data/dataForR.dat", as.is=TRUE )
names(expData) <- c('subject','condition','subCondition','latency','response')
expData <- recodeResponses(expData)
plot1 <- vector("list", 4); plot2 <- vector("list",2)
#run for both the short and long CTOA subcondition
subCondList <- unique(expData$subCondition)
for( subCond in subCondList ) {
#create subsection for the two subconditions
conditionData <- expData[expData$subCondition==subCond,]
if( subCond==CONDITION_SHORT ) {
print('SHORT')
versionID       <- '1B_short'
plotCount       <- 1
figIndicators   <-c('A','B')
} else if( subCond==CONDITION_LONG ) {
print('LONG')
versionID       <- '1B_long'
plotCount       <- 2
figIndicators   <-c('C','D')
}
load(paste('../outputs/data/jagsOutput', versionID ,'.rData',sep=""))
subjSumm <- getSubjectLatData(conditionData)
performanceFrame <- caclulateMeanCenteredPerformanceFrame(conditionData, numbBins=8)
print(performanceFrame)
posteriorPlot <- plotPosteriors(jagsRawData, conditionData)
fittingPlot <- plotFits(jagsRawData, performanceFrame, subjSumm$subjectMeans, xMinAxis=150, xMaxAxis=400)
plot1[[plotCount]] <- arrangeGrob(posteriorPlot, top = textGrob(figIndicators[1], x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
plot2[[plotCount]] <- arrangeGrob(fittingPlot, top = textGrob(figIndicators[2], x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
grid.arrange(plot1[[plotCount]],plot2[[plotCount]],ncol=2)
print(bayesFactors)
}
figFileName <- "../outputs/manuscriptFigures/figure10.pdf"
ggsave(figFileName,arrangeGrob(plot1[[1]],plot2[[1]],plot1[[2]],plot2[[2]], ncol=2, nrow=2),width=15,height=10)
grid.arrange(plot1[[1]],plot2[[1]],plot1[[2]],plot2[[2]],ncol=2,nrow=2)
#clear workspace:
rm(list=ls())
#set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#init constants coding (copied from matlab files)
CONDITION_REL <- 21; lockBinding("CONDITION_REL", globalenv())
CONDITION_IRR <- 22; lockBinding("CONDITION_IRR", globalenv())
CONDITION_SHORT <- 0.6; lockBinding("CONDITION_SHORT", globalenv())
CONDITION_LONG <- 1; lockBinding("CONDITION_LONG", globalenv())
library(ggplot2)
library(grid)
library(gridExtra)
source("../../rFunctions/PlottingPosteriorsExp1.R")
source("../../rFunctions/DataProcessingExp1.R")
source("../../rFunctions/JagsModelFunctionsExp1.R")
#load data
expData <- read.table( "../data/dataForR.dat", as.is=TRUE )
names(expData) <- c('subject','condition','subCondition','latency','response')
expData <- recodeResponses(expData)
plot1 <- vector("list", 4); plot2 <- vector("list",2)
#run for both the short and long CTOA subcondition
subCondList <- unique(expData$subCondition)
for( subCond in subCondList ) {
#create subsection for the two subconditions
conditionData <- expData[expData$subCondition==subCond,]
if( subCond==CONDITION_SHORT ) {
print('SHORT')
versionID       <- '1B_short'
plotCount       <- 1
figIndicators   <-c('A','B')
} else if( subCond==CONDITION_LONG ) {
print('LONG')
versionID       <- '1B_long'
plotCount       <- 2
figIndicators   <-c('C','D')
}
load(paste('../outputs/data/jagsOutput', versionID ,'.rData',sep=""))
subjSumm <- getSubjectLatData(conditionData)
performanceFrame <- caclulateMeanCenteredPerformanceFrame(conditionData, numbBins=8)
print(performanceFrame)
posteriorPlot <- plotPosteriors(jagsRawData, conditionData)
fittingPlot <- plotFits(jagsRawData, performanceFrame, subjSumm$subjectMeans, xMinAxis=150, xMaxAxis=400)
plot1[[plotCount]] <- arrangeGrob(posteriorPlot, top = textGrob(figIndicators[1], x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
plot2[[plotCount]] <- arrangeGrob(fittingPlot, top = textGrob(figIndicators[2], x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
grid.arrange(plot1[[plotCount]],plot2[[plotCount]],ncol=2)
print(bayesFactors)
}
figFileName <- "../outputs/manuscriptFigures/figure10.pdf"
ggsave(figFileName,arrangeGrob(plot1[[1]],plot2[[1]],plot1[[2]],plot2[[2]], ncol=2, nrow=2),width=15,height=10)
grid.arrange(plot1[[1]],plot2[[1]],plot1[[2]],plot2[[2]],ncol=2,nrow=2)
library(lme4)
library(boot)
library(ggplot2)
library(LaplacesDemon)
library(plyr)
sessioninf()
sessioninf
sessioninfo::package_info()
library(stats)
sessioninfo::package_info()
library(stats)
sessioninfo::package_info()
package_version(stats)
packageVersion(stats)
package_version(HDInterval)
package_version("HDInterval")
packageVersion("HDInterval")

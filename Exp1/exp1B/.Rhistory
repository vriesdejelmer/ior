+ scale_linetype_manual(name=NULL,values=c("dotdash","longdash","solid"),labels=bayesLabels)
+ scale_color_manual(name=NULL,values = c("grey90", "grey70", "grey50"),labels=bayesLabels)
+ xlim(min(alphaRange), max(alphaRange))
+ geom_point(data=pointsFrame,aes(x=xPoints,y=yPoints),colour="grey",size=2.5)
+ labs(x="Delta Alpha",y="Density")
+ theme_bw() + theme(
legend.key.size = unit(1.5,"line"), legend.key.width = unit(0.4,"in"),
legend.position = c(0.215, 0.8),  legend.text = element_text(size=legendSize),
legend.box.background = element_rect(colour="black"),
axis.line.y = element_line(), axis.text = element_text(size=10),
axis.line.x = element_line(), axis.title =element_text(size=14),
axis.title.x = element_text(margin = unit(c(5, 0, 0, 0), "mm")),
axis.title.y = element_text(margin = unit(c(0, 5, 0, 0), "mm")),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )
)
expr1 <- function(x) 1/(1+exp( -( (median(jagsRawData$mu.alpha)-median(jagsRawData$mu.delta.alpha)/2) + (median(jagsRawData$mu.beta) * x) ) ) )
expr2 <- function(x) 1/(1+exp( -( (median(jagsRawData$mu.alpha)+median(jagsRawData$mu.delta.alpha)/2) + (median(jagsRawData$mu.beta) * x) ) ) )
performanceFrame$latBins <- performanceFrame$latBins + mean(subjectMeans)
xMin <- -80; xMax <- 100
xRange <- seq(xMin,xMax,0.1)
fittedData <- data.frame(x=c(xRange+mean(subjectMeans),xRange+mean(subjectMeans)),y=c(expr1(xRange),expr2(xRange)),coding=c(rep(1,length(xRange)),rep(2,length(xRange))))
#condition labels
labelList <- c("Irrelevant Cue Cond.","Relevant Cue Cond.")
#ggplot component
(plot2 <- ggplot(fittedData,aes(y=y,x=x,color=as.factor(coding)))
+ geom_point(data=performanceFrame,aes(x=latBins,y=perfBins,color=as.factor(coding),shape=as.factor(coding)),size=2.5)
+ geom_line(aes(linetype=as.factor(coding)),size=1.5)
+ scale_linetype_manual(name=NULL,values=c("solid","dotdash"),labels=labelList)
+ scale_shape_manual(name=NULL,values = c(16,17),labels=labelList)
+ scale_color_manual(name=NULL,values = c("grey65", "grey45"),labels=labelList)
+ xlim(xMin+mean(subjectMeans), xMax+mean(subjectMeans)) + ylim(0.2, 1.01)
+ labs(x="Latency (ms)",y="Accuracy")
+ theme_bw() + theme(
legend.key.size = unit(1.5,"line"), legend.key.width = unit(0.4,"in"),
legend.position = c(0.7, 0.2),  legend.text = element_text(size=legendSize),
legend.box.background = element_rect(colour="black"),
axis.line.y = element_line(), axis.text = element_text(size=14),
axis.line.x = element_line(), axis.title =element_text(size=15),
axis.title.x = element_text(margin = unit(c(5, 0, 0, 0), "mm")),
axis.title.y = element_text(margin = unit(c(0, 5, 0, 0), "mm")),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )
)
plot1 <- arrangeGrob(plot1, top = textGrob("A", x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
plot2 <- arrangeGrob(plot2, top = textGrob("B", x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
grid.arrange(plot1,plot2,ncol=2)
figFileName <- paste(figName,".pdf", sep = "")
ggsave(figFileName,arrangeGrob(plot1, plot2, ncol=2),width=15,height=5)
print(bayesFactors)
#################################################
############## GENERAL SETUP
#clear workspace:
rm(list=ls())
#set working directory
setwd("~/Dropbox/academia/experimentals/processing/analyse-process/ISA/mainExp/")
#load libraries
library(R2jags)
library(polspline)
library(stats)
library(plyr)
library(LaplacesDemon)
library(gridExtra)
library(ggplot2)
figName <- "outputs/figure6"
load('outputs/jagsOutput1A.rdata')
print(bayesFactors)
#determine number of bins
numbBins <- 10
#set vars
priorWidth <- 0.707
#################################################
############## GO-GO GGPLOT
legendSize  <- 12
labelList   <- c("Irr. Cue Cond","Rel. Cue Cond")
alphaRange <- seq(-3.2,2,0.01) #create range for plotting
ypriorSR    <- dcauchy( alphaRange, location = 0, scale = priorWidth )
ypriorVP    <- dcauchy( alphaRange, location = alphaOffset, scale = priorWidth )
yposterior  <- dlogspline( alphaRange, logspline(jagsRawData$mu.delta.alpha) )
#data frame for plotting
xList       <- as.double(c(alphaRange,alphaRange,alphaRange))
yList       <- c(ypriorSR,ypriorVP,yposterior)
coding      <- as.factor(c(rep(1,length(alphaRange)),rep(2,length(alphaRange)),rep(3,length(alphaRange))))
resultFrame <- data.frame(x=xList,y=yList,coding=coding)
pointsFrame <- data.frame(xPoints=c(0,0,alphaOffset,alphaOffset),yPoints=with(jagsHypData,c(postSR,priorSR,postVP,priorVP)))
bayesLabels <- c("Readiness Prior","Visual Prior","Posterior")
(plot1 <- ggplot(resultFrame,aes(y=y,x=x,color=coding))
+ geom_vline(xintercept=alphaOffset,color="grey",linetype="dashed",size=0.75,show.legend=F)
+ geom_vline(xintercept=0,color="grey",linetype="dashed",size=0.75,show.legend=F)
+ geom_line(aes(linetype=coding,group=coding),size=1.5)
+ scale_linetype_manual(name=NULL,values=c("dotdash","longdash","solid"),labels=bayesLabels)
+ scale_color_manual(name=NULL,values = c("grey65", "grey55", "grey45"),labels=bayesLabels)
+ xlim(min(alphaRange), max(alphaRange))
+ geom_point(data=pointsFrame,aes(x=xPoints,y=yPoints),colour="grey",size=2.5)
+ labs(x="Delta Alpha",y="Density")
+ theme_bw() + theme(
legend.key.size = unit(1.5,"line"), legend.key.width = unit(0.4,"in"),
legend.position = c(0.215, 0.8),  legend.text = element_text(size=legendSize),
legend.box.background = element_rect(colour="black"),
axis.line.y = element_line(), axis.text = element_text(size=10),
axis.line.x = element_line(), axis.title =element_text(size=14),
axis.title.x = element_text(margin = unit(c(5, 0, 0, 0), "mm")),
axis.title.y = element_text(margin = unit(c(0, 5, 0, 0), "mm")),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )
)
expr1 <- function(x) 1/(1+exp( -( (median(jagsRawData$mu.alpha)-median(jagsRawData$mu.delta.alpha)/2) + (median(jagsRawData$mu.beta) * x) ) ) )
expr2 <- function(x) 1/(1+exp( -( (median(jagsRawData$mu.alpha)+median(jagsRawData$mu.delta.alpha)/2) + (median(jagsRawData$mu.beta) * x) ) ) )
performanceFrame$latBins <- performanceFrame$latBins + mean(subjectMeans)
xMin <- -80; xMax <- 100
xRange <- seq(xMin,xMax,0.1)
fittedData <- data.frame(x=c(xRange+mean(subjectMeans),xRange+mean(subjectMeans)),y=c(expr1(xRange),expr2(xRange)),coding=c(rep(1,length(xRange)),rep(2,length(xRange))))
#condition labels
labelList <- c("Irrelevant Cue Cond.","Relevant Cue Cond.")
#ggplot component
(plot2 <- ggplot(fittedData,aes(y=y,x=x,color=as.factor(coding)))
+ geom_point(data=performanceFrame,aes(x=latBins,y=perfBins,color=as.factor(coding),shape=as.factor(coding)),size=2.5)
+ geom_line(aes(linetype=as.factor(coding)),size=1.5)
+ scale_linetype_manual(name=NULL,values=c("solid","dotdash"),labels=labelList)
+ scale_shape_manual(name=NULL,values = c(16,17),labels=labelList)
+ scale_color_manual(name=NULL,values = c("grey65", "grey45"),labels=labelList)
+ xlim(xMin+mean(subjectMeans), xMax+mean(subjectMeans)) + ylim(0.2, 1.01)
+ labs(x="Latency (ms)",y="Accuracy")
+ theme_bw() + theme(
legend.key.size = unit(1.5,"line"), legend.key.width = unit(0.4,"in"),
legend.position = c(0.7, 0.2),  legend.text = element_text(size=legendSize),
legend.box.background = element_rect(colour="black"),
axis.line.y = element_line(), axis.text = element_text(size=14),
axis.line.x = element_line(), axis.title =element_text(size=15),
axis.title.x = element_text(margin = unit(c(5, 0, 0, 0), "mm")),
axis.title.y = element_text(margin = unit(c(0, 5, 0, 0), "mm")),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )
)
plot1 <- arrangeGrob(plot1, top = textGrob("A", x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
plot2 <- arrangeGrob(plot2, top = textGrob("B", x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
grid.arrange(plot1,plot2,ncol=2)
figFileName <- paste(figName,".pdf", sep = "")
ggsave(figFileName,arrangeGrob(plot1, plot2, ncol=2),width=15,height=5)
print(bayesFactors)
#################################################
############## GENERAL SETUP
#clear workspace:
rm(list=ls())
#set working directory
setwd("~/Dropbox/academia/experimentals/processing/analyse-process/ISA/mainExp/")
#load libraries
library(R2jags)
library(polspline)
library(stats)
library(plyr)
library(LaplacesDemon)
library(gridExtra)
library(ggplot2)
figName <- "outputs/figure6"
load('outputs/jagsOutput1A.rdata')
print(bayesFactors)
#determine number of bins
numbBins <- 10
#set vars
priorWidth <- 0.707
#################################################
############## GO-GO GGPLOT
legendSize  <- 12
labelList   <- c("Irr. Cue Cond","Rel. Cue Cond")
alphaRange <- seq(-3.2,2,0.01) #create range for plotting
ypriorSR    <- dcauchy( alphaRange, location = 0, scale = priorWidth )
ypriorVP    <- dcauchy( alphaRange, location = alphaOffset, scale = priorWidth )
yposterior  <- dlogspline( alphaRange, logspline(jagsRawData$mu.delta.alpha) )
#data frame for plotting
xList       <- as.double(c(alphaRange,alphaRange,alphaRange))
yList       <- c(ypriorSR,ypriorVP,yposterior)
coding      <- as.factor(c(rep(1,length(alphaRange)),rep(2,length(alphaRange)),rep(3,length(alphaRange))))
resultFrame <- data.frame(x=xList,y=yList,coding=coding)
pointsFrame <- data.frame(xPoints=c(0,0,alphaOffset,alphaOffset),yPoints=with(jagsHypData,c(postSR,priorSR,postVP,priorVP)))
bayesLabels <- c("Readiness Prior","Visual Prior","Posterior")
(plot1 <- ggplot(resultFrame,aes(y=y,x=x,color=coding))
+ geom_vline(xintercept=alphaOffset,color="grey",linetype="dashed",size=0.75,show.legend=F)
+ geom_vline(xintercept=0,color="grey",linetype="dashed",size=0.75,show.legend=F)
+ geom_line(aes(linetype=coding,group=coding),size=1.5)
+ scale_linetype_manual(name=NULL,values=c("dotdash","longdash","solid"),labels=bayesLabels)
+ scale_color_manual(name=NULL,values = c("grey70", "grey50", "grey30"),labels=bayesLabels)
+ xlim(min(alphaRange), max(alphaRange))
+ geom_point(data=pointsFrame,aes(x=xPoints,y=yPoints),colour="grey",size=2.5)
+ labs(x="Delta Alpha",y="Density")
+ theme_bw() + theme(
legend.key.size = unit(1.5,"line"), legend.key.width = unit(0.4,"in"),
legend.position = c(0.215, 0.8),  legend.text = element_text(size=legendSize),
legend.box.background = element_rect(colour="black"),
axis.line.y = element_line(), axis.text = element_text(size=10),
axis.line.x = element_line(), axis.title =element_text(size=14),
axis.title.x = element_text(margin = unit(c(5, 0, 0, 0), "mm")),
axis.title.y = element_text(margin = unit(c(0, 5, 0, 0), "mm")),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )
)
expr1 <- function(x) 1/(1+exp( -( (median(jagsRawData$mu.alpha)-median(jagsRawData$mu.delta.alpha)/2) + (median(jagsRawData$mu.beta) * x) ) ) )
expr2 <- function(x) 1/(1+exp( -( (median(jagsRawData$mu.alpha)+median(jagsRawData$mu.delta.alpha)/2) + (median(jagsRawData$mu.beta) * x) ) ) )
performanceFrame$latBins <- performanceFrame$latBins + mean(subjectMeans)
xMin <- -80; xMax <- 100
xRange <- seq(xMin,xMax,0.1)
fittedData <- data.frame(x=c(xRange+mean(subjectMeans),xRange+mean(subjectMeans)),y=c(expr1(xRange),expr2(xRange)),coding=c(rep(1,length(xRange)),rep(2,length(xRange))))
#condition labels
labelList <- c("Irrelevant Cue Cond.","Relevant Cue Cond.")
#ggplot component
(plot2 <- ggplot(fittedData,aes(y=y,x=x,color=as.factor(coding)))
+ geom_point(data=performanceFrame,aes(x=latBins,y=perfBins,color=as.factor(coding),shape=as.factor(coding)),size=2.5)
+ geom_line(aes(linetype=as.factor(coding)),size=1.5)
+ scale_linetype_manual(name=NULL,values=c("solid","dotdash"),labels=labelList)
+ scale_shape_manual(name=NULL,values = c(16,17),labels=labelList)
+ scale_color_manual(name=NULL,values = c("grey65", "grey45"),labels=labelList)
+ xlim(xMin+mean(subjectMeans), xMax+mean(subjectMeans)) + ylim(0.2, 1.01)
+ labs(x="Latency (ms)",y="Accuracy")
+ theme_bw() + theme(
legend.key.size = unit(1.5,"line"), legend.key.width = unit(0.4,"in"),
legend.position = c(0.7, 0.2),  legend.text = element_text(size=legendSize),
legend.box.background = element_rect(colour="black"),
axis.line.y = element_line(), axis.text = element_text(size=14),
axis.line.x = element_line(), axis.title =element_text(size=15),
axis.title.x = element_text(margin = unit(c(5, 0, 0, 0), "mm")),
axis.title.y = element_text(margin = unit(c(0, 5, 0, 0), "mm")),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )
)
plot1 <- arrangeGrob(plot1, top = textGrob("A", x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
plot2 <- arrangeGrob(plot2, top = textGrob("B", x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
grid.arrange(plot1,plot2,ncol=2)
figFileName <- paste(figName,".pdf", sep = "")
ggsave(figFileName,arrangeGrob(plot1, plot2, ncol=2),width=15,height=5)
print(bayesFactors)
#################################################
############## GENERAL SETUP
#clear workspace:
rm(list=ls())
#set working directory
setwd("~/Dropbox/academia/experimentals/processing/analyse-process/ISA/mainExp/")
#load libraries
library(R2jags)
library(polspline)
library(stats)
library(plyr)
library(LaplacesDemon)
library(gridExtra)
library(ggplot2)
figName <- "outputs/figure6"
load('outputs/jagsOutput1A.rdata')
print(bayesFactors)
#determine number of bins
numbBins <- 10
#set vars
priorWidth <- 0.707
#################################################
############## GO-GO GGPLOT
legendSize  <- 12
labelList   <- c("Irr. Cue Cond","Rel. Cue Cond")
alphaRange <- seq(-3.2,2,0.01) #create range for plotting
ypriorSR    <- dcauchy( alphaRange, location = 0, scale = priorWidth )
ypriorVP    <- dcauchy( alphaRange, location = alphaOffset, scale = priorWidth )
yposterior  <- dlogspline( alphaRange, logspline(jagsRawData$mu.delta.alpha) )
#data frame for plotting
xList       <- as.double(c(alphaRange,alphaRange,alphaRange))
yList       <- c(ypriorSR,ypriorVP,yposterior)
coding      <- as.factor(c(rep(1,length(alphaRange)),rep(2,length(alphaRange)),rep(3,length(alphaRange))))
resultFrame <- data.frame(x=xList,y=yList,coding=coding)
pointsFrame <- data.frame(xPoints=c(0,0,alphaOffset,alphaOffset),yPoints=with(jagsHypData,c(postSR,priorSR,postVP,priorVP)))
bayesLabels <- c("Readiness Prior","Visual Prior","Posterior")
(plot1 <- ggplot(resultFrame,aes(y=y,x=x,color=coding))
+ geom_vline(xintercept=alphaOffset,color="grey",linetype="dashed",size=0.75,show.legend=F)
+ geom_vline(xintercept=0,color="grey",linetype="dashed",size=0.75,show.legend=F)
+ geom_line(aes(linetype=coding,group=coding),size=1.5)
+ scale_linetype_manual(name=NULL,values=c("dotdash","longdash","solid"),labels=bayesLabels)
+ scale_color_manual(name=NULL,values = c("grey50", "grey80", "grey20"),labels=bayesLabels)
+ xlim(min(alphaRange), max(alphaRange))
+ geom_point(data=pointsFrame,aes(x=xPoints,y=yPoints),colour="grey",size=2.5)
+ labs(x="Delta Alpha",y="Density")
+ theme_bw() + theme(
legend.key.size = unit(1.5,"line"), legend.key.width = unit(0.4,"in"),
legend.position = c(0.215, 0.8),  legend.text = element_text(size=legendSize),
legend.box.background = element_rect(colour="black"),
axis.line.y = element_line(), axis.text = element_text(size=10),
axis.line.x = element_line(), axis.title =element_text(size=14),
axis.title.x = element_text(margin = unit(c(5, 0, 0, 0), "mm")),
axis.title.y = element_text(margin = unit(c(0, 5, 0, 0), "mm")),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )
)
expr1 <- function(x) 1/(1+exp( -( (median(jagsRawData$mu.alpha)-median(jagsRawData$mu.delta.alpha)/2) + (median(jagsRawData$mu.beta) * x) ) ) )
expr2 <- function(x) 1/(1+exp( -( (median(jagsRawData$mu.alpha)+median(jagsRawData$mu.delta.alpha)/2) + (median(jagsRawData$mu.beta) * x) ) ) )
performanceFrame$latBins <- performanceFrame$latBins + mean(subjectMeans)
xMin <- -80; xMax <- 100
xRange <- seq(xMin,xMax,0.1)
fittedData <- data.frame(x=c(xRange+mean(subjectMeans),xRange+mean(subjectMeans)),y=c(expr1(xRange),expr2(xRange)),coding=c(rep(1,length(xRange)),rep(2,length(xRange))))
#condition labels
labelList <- c("Irrelevant Cue Cond.","Relevant Cue Cond.")
#ggplot component
(plot2 <- ggplot(fittedData,aes(y=y,x=x,color=as.factor(coding)))
+ geom_point(data=performanceFrame,aes(x=latBins,y=perfBins,color=as.factor(coding),shape=as.factor(coding)),size=2.5)
+ geom_line(aes(linetype=as.factor(coding)),size=1.5)
+ scale_linetype_manual(name=NULL,values=c("solid","dotdash"),labels=labelList)
+ scale_shape_manual(name=NULL,values = c(16,17),labels=labelList)
+ scale_color_manual(name=NULL,values = c("grey65", "grey45"),labels=labelList)
+ xlim(xMin+mean(subjectMeans), xMax+mean(subjectMeans)) + ylim(0.2, 1.01)
+ labs(x="Latency (ms)",y="Accuracy")
+ theme_bw() + theme(
legend.key.size = unit(1.5,"line"), legend.key.width = unit(0.4,"in"),
legend.position = c(0.7, 0.2),  legend.text = element_text(size=legendSize),
legend.box.background = element_rect(colour="black"),
axis.line.y = element_line(), axis.text = element_text(size=14),
axis.line.x = element_line(), axis.title =element_text(size=15),
axis.title.x = element_text(margin = unit(c(5, 0, 0, 0), "mm")),
axis.title.y = element_text(margin = unit(c(0, 5, 0, 0), "mm")),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )
)
plot1 <- arrangeGrob(plot1, top = textGrob("A", x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
plot2 <- arrangeGrob(plot2, top = textGrob("B", x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
grid.arrange(plot1,plot2,ncol=2)
figFileName <- paste(figName,".pdf", sep = "")
ggsave(figFileName,arrangeGrob(plot1, plot2, ncol=2),width=15,height=5)
print(bayesFactors)
#################################################
############## GENERAL SETUP
#clear workspace:
rm(list=ls())
#set working directory
setwd("~/Dropbox/academia/experimentals/processing/analyse-process/ISA/mainExp/")
#load libraries
library(R2jags)
library(polspline)
library(stats)
library(plyr)
library(LaplacesDemon)
library(gridExtra)
library(ggplot2)
figName <- "outputs/figure6"
load('outputs/jagsOutput1A.rdata')
print(bayesFactors)
#determine number of bins
numbBins <- 10
#set vars
priorWidth <- 0.707
#################################################
############## GO-GO GGPLOT
legendSize  <- 12
labelList   <- c("Irr. Cue Cond","Rel. Cue Cond")
alphaRange <- seq(-3.2,2,0.01) #create range for plotting
ypriorSR    <- dcauchy( alphaRange, location = 0, scale = priorWidth )
ypriorVP    <- dcauchy( alphaRange, location = alphaOffset, scale = priorWidth )
yposterior  <- dlogspline( alphaRange, logspline(jagsRawData$mu.delta.alpha) )
#data frame for plotting
xList       <- as.double(c(alphaRange,alphaRange,alphaRange))
yList       <- c(ypriorSR,ypriorVP,yposterior)
coding      <- as.factor(c(rep(1,length(alphaRange)),rep(2,length(alphaRange)),rep(3,length(alphaRange))))
resultFrame <- data.frame(x=xList,y=yList,coding=coding)
pointsFrame <- data.frame(xPoints=c(0,0,alphaOffset,alphaOffset),yPoints=with(jagsHypData,c(postSR,priorSR,postVP,priorVP)))
bayesLabels <- c("Readiness Prior","Visual Prior","Posterior")
(plot1 <- ggplot(resultFrame,aes(y=y,x=x,color=coding))
+ geom_vline(xintercept=alphaOffset,color="grey",linetype="dashed",size=0.75,show.legend=F)
+ geom_vline(xintercept=0,color="grey",linetype="dashed",size=0.75,show.legend=F)
+ geom_line(aes(linetype=coding,group=coding),size=1.5)
+ scale_linetype_manual(name=NULL,values=c("dotdash","longdash","solid"),labels=bayesLabels)
+ scale_color_manual(name=NULL,values = c("grey20", "grey80", "grey50"),labels=bayesLabels)
+ xlim(min(alphaRange), max(alphaRange))
+ geom_point(data=pointsFrame,aes(x=xPoints,y=yPoints),colour="grey",size=2.5)
+ labs(x="Delta Alpha",y="Density")
+ theme_bw() + theme(
legend.key.size = unit(1.5,"line"), legend.key.width = unit(0.4,"in"),
legend.position = c(0.215, 0.8),  legend.text = element_text(size=legendSize),
legend.box.background = element_rect(colour="black"),
axis.line.y = element_line(), axis.text = element_text(size=10),
axis.line.x = element_line(), axis.title =element_text(size=14),
axis.title.x = element_text(margin = unit(c(5, 0, 0, 0), "mm")),
axis.title.y = element_text(margin = unit(c(0, 5, 0, 0), "mm")),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )
)
expr1 <- function(x) 1/(1+exp( -( (median(jagsRawData$mu.alpha)-median(jagsRawData$mu.delta.alpha)/2) + (median(jagsRawData$mu.beta) * x) ) ) )
expr2 <- function(x) 1/(1+exp( -( (median(jagsRawData$mu.alpha)+median(jagsRawData$mu.delta.alpha)/2) + (median(jagsRawData$mu.beta) * x) ) ) )
performanceFrame$latBins <- performanceFrame$latBins + mean(subjectMeans)
xMin <- -80; xMax <- 100
xRange <- seq(xMin,xMax,0.1)
fittedData <- data.frame(x=c(xRange+mean(subjectMeans),xRange+mean(subjectMeans)),y=c(expr1(xRange),expr2(xRange)),coding=c(rep(1,length(xRange)),rep(2,length(xRange))))
#condition labels
labelList <- c("Irrelevant Cue Cond.","Relevant Cue Cond.")
#ggplot component
(plot2 <- ggplot(fittedData,aes(y=y,x=x,color=as.factor(coding)))
+ geom_point(data=performanceFrame,aes(x=latBins,y=perfBins,color=as.factor(coding),shape=as.factor(coding)),size=2.5)
+ geom_line(aes(linetype=as.factor(coding)),size=1.5)
+ scale_linetype_manual(name=NULL,values=c("solid","dotdash"),labels=labelList)
+ scale_shape_manual(name=NULL,values = c(16,17),labels=labelList)
+ scale_color_manual(name=NULL,values = c("grey65", "grey45"),labels=labelList)
+ xlim(xMin+mean(subjectMeans), xMax+mean(subjectMeans)) + ylim(0.2, 1.01)
+ labs(x="Latency (ms)",y="Accuracy")
+ theme_bw() + theme(
legend.key.size = unit(1.5,"line"), legend.key.width = unit(0.4,"in"),
legend.position = c(0.7, 0.2),  legend.text = element_text(size=legendSize),
legend.box.background = element_rect(colour="black"),
axis.line.y = element_line(), axis.text = element_text(size=14),
axis.line.x = element_line(), axis.title =element_text(size=15),
axis.title.x = element_text(margin = unit(c(5, 0, 0, 0), "mm")),
axis.title.y = element_text(margin = unit(c(0, 5, 0, 0), "mm")),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )
)
plot1 <- arrangeGrob(plot1, top = textGrob("A", x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
plot2 <- arrangeGrob(plot2, top = textGrob("B", x = unit(0.05, "npc") , y   = unit(0.95, "npc"), just=c("left","top"), gp=gpar(col="black", fontsize=18)))
grid.arrange(plot1,plot2,ncol=2)
figFileName <- paste(figName,".pdf", sep = "")
ggsave(figFileName,arrangeGrob(plot1, plot2, ncol=2),width=15,height=5)
print(bayesFactors)
#################################################
############## GENERAL SETUP
#clear workspace:
rm(list=ls())
#set working directory
setwd("~/Dropbox/academia/experimentals/processing/analyse-process/ISA/targetDiscrimination/")
#load libraries
library(R2jags)
library(polspline)
library(stats)
library(plyr)
library(LaplacesDemon)
library(gridExtra)
library(ggplot2)
library(grid)
plotter <- vector("list",4)
letterList <- c("A","B","C","D")
conditions <- c('short','long')
for( cond in 1:length(conditions) ) {
loadName <- paste('outputs/jagsVar1B', conditions[cond], '.rData',sep='')
load(loadName)
print(bayesFactors)
#determine number of bins
numbBins <- 8
#set vars
priorwidth = 0.707
#################################################
############## GO-GO GGPLOT
legendSize  <- 12
labelList   <- c("Irr. Cue Cond","Rel. Cue Cond")
alphaRange <- seq(-3.2,2,0.01) #create range for plotting
ypriorSR    <- dcauchy( alphaRange, location = 0, scale = priorwidth )
ypriorVP    <- dcauchy( alphaRange, location = alphaOffset, scale = priorwidth )
yposterior  <- dlogspline( alphaRange, logspline(jagsRawData$mu.delta.alpha) )
#data frame for plotting
xList       <- as.double(c(alphaRange,alphaRange,alphaRange))
yList       <- c(ypriorSR,ypriorVP,yposterior)
coding      <- as.factor(c(rep(1,length(alphaRange)),rep(2,length(alphaRange)),rep(3,length(alphaRange))))
resultFrame <- data.frame(x=xList,y=yList,coding=coding)
pointsFrame <- data.frame(xPoints=c(0,0,alphaOffset,alphaOffset),yPoints=with(jagsHypData,c(postSR,priorSR,postVP,priorVP)))
bayesLabels <- c("Readiness Prior","Visual Prior","Posterior")
plotNum <- 1+2*(cond-1)
(plotter[[plotNum]] <- ggplot(resultFrame,aes(y=y,x=x,color=coding))
+ geom_vline(xintercept=alphaOffset,color="grey",linetype="dashed",size=0.5,show.legend=F)
+ geom_vline(xintercept=0,color="grey",linetype="dashed",size=0.5)
+ geom_line(aes(linetype=coding,group=coding),size=1.5)
+ scale_linetype_manual(name=NULL,values=c("dotdash","longdash","solid"),labels=bayesLabels)
+ scale_color_manual(name=NULL,values = c("grey20", "grey80", "grey50"),labels=bayesLabels)
+ xlim(min(alphaRange), max(alphaRange))
+ geom_point(data=pointsFrame,aes(x=xPoints,y=yPoints),colour="grey",size=2.5)
+ labs(x="Delta Alpha",y="Density")
+ theme_bw() + theme(
legend.key.size = unit(1.5,"line"), legend.key.width = unit(0.4,"in"),
legend.position = c(0.215, 0.8),  legend.text = element_text(size=legendSize),
legend.box.background = element_rect(colour="black"),
axis.line.y = element_line(), axis.text = element_text(size=10),
axis.line.x = element_line(), axis.title =element_text(size=14),
axis.title.x = element_text(margin = unit(c(5, 0, 0, 0), "mm")),
axis.title.y = element_text(margin = unit(c(0, 5, 0, 0), "mm")),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )
)
plotter[[plotNum]] <- arrangeGrob(plotter[[1+2*(cond-1)]], top = textGrob(letterList[plotNum], x = unit(0.05, "npc")
, y   = unit(0.95, "npc"), just=c("left","top"),
gp=gpar(col="black", fontsize=18)))
expr1 <- function(x) 1/(1+exp( -( (median(jagsRawData$mu.alpha)-median(jagsRawData$mu.delta.alpha)/2) + (median(jagsRawData$mu.beta) * x) ) ) )
expr2 <- function(x) 1/(1+exp( -( (median(jagsRawData$mu.alpha)+median(jagsRawData$mu.delta.alpha)/2) + (median(jagsRawData$mu.beta) * x) ) ) )
performanceFrame$latBins <- performanceFrame$latBins + mean(subjectMeans)
xMin <- -100; xMax <- 150
xRange <- seq(xMin,xMax,0.1)
fittedData <- data.frame(x=c(xRange+mean(subjectMeans),xRange+mean(subjectMeans)),y=c(expr1(xRange),expr2(xRange)),coding=c(rep(22,length(xRange)),rep(23,length(xRange))))
#condition labels
labelList <- c("Irrelevant Cue Cond.","Relevant Cue Cond.")
#ggplot component
plotNum <- 2+2*(cond-1)
plotter[[plotNum]] <- ggplot(fittedData,aes(y=y,x=x,color=as.factor(coding))) +
geom_point(data=performanceFrame,aes(x=latBins,y=perfBins,color=as.factor(coding),shape=as.factor(coding)),size=2.5) +
geom_line(aes(linetype=as.factor(coding)),size=1.3) +
scale_linetype_manual(name=NULL,values=c("solid","dotdash"),labels=labelList) +
scale_shape_manual(name=NULL,values = c(16,17),labels=labelList) +
scale_color_manual(name=NULL,values = c("grey65", "grey45"),labels=labelList) +
xlim(xMin+mean(subjectMeans), xMax+mean(subjectMeans)) + ylim(0.2, 1.01) +
labs(x="Latency (ms)",y="Accuracy") +
theme_bw() + theme(
legend.key.size = unit(1.5,"line"), legend.key.width = unit(0.4,"in"),
legend.position = c(0.7, 0.2),  legend.text = element_text(size=legendSize),
legend.box.background = element_rect(colour="black"),
axis.line.y = element_line(), axis.text = element_text(size=14),
axis.line.x = element_line(), axis.title =element_text(size=15),
axis.title.x = element_text(margin = unit(c(5, 0, 0, 0), "mm")),
axis.title.y = element_text(margin = unit(c(0, 5, 0, 0), "mm")),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )
plotter[[plotNum]] <- arrangeGrob(plotter[[2+2*(cond-1)]], top = textGrob(letterList[plotNum], x = unit(0.05, "npc")
, y   = unit(0.95, "npc"), just=c("left","top"),
gp=gpar(col="black", fontsize=18)))
}
grid.arrange(plotter[[1]],plotter[[2]],plotter[[3]],plotter[[4]],ncol=2,nrow=2)
figFileName <- "outputs/figure9.pdf"
ggsave(figFileName,arrangeGrob(plotter[[1]],plotter[[2]],plotter[[3]],plotter[[4]],ncol=2,nrow=2),width=15,height=10)
print(bayesFactors)
sqrt(2)/2

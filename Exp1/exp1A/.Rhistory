alpha <- rnorm(1,midLatency,midLatency*devProp)*beta
delta_alpha <- rnorm(1,meanLatDif,meanLatDif*devProp)*beta
logistic <- function(x, beta, alpha, delta_alpha) 1/(1+exp(-(beta*x-alpha+delta_alpha/2)))
plot(x, logistic(x, beta, alpha, delta_alpha),type="l")
lines(x, logistic(x, beta, alpha, -delta_alpha))
dist1 <- rlnorm(trials,5.5,0.3)
dist2 <- rlnorm(trials,5.6,0.3)
resp1 <- c(1:length(dist1))
resp2 <- c(1:length(dist2))
ordering1 <- order(dist1)
ordering2 <- order(dist2)
for (i in 1:length(dist1)) {
resp1[i] <- (logistic(dist1[i], beta, alpha, delta_alpha) > runif(1))
resp2[i] <- (logistic(dist2[i], beta, alpha, -delta_alpha))
}
latencies1 <- dist1[ordering1]
orderResps1 <- resp1[ordering1]
latencies2 <- dist2[ordering2]
orderResps2 <- resp2[ordering2]
latBin1 <- c(); latBin2 <- c()
resBin1 <- c(); resBin2 <- c()
bins <- 5
binWidth <- length(latencies1)/bins
for (i in 1:bins) {
beginIndex <- 1 + (i-1)*binWidth
endIndex <- i*binWidth
latBin1[i] <- mean(latencies1[beginIndex:endIndex])
resBin1[i] <- mean(orderResps1[beginIndex:endIndex])
latBin2[i] <- mean(latencies2[beginIndex:endIndex])
resBin2[i] <- mean(orderResps2[beginIndex:endIndex])
}
points(latBin1, resBin1, p=0)
points(latBin2, resBin2, p=1)
dev.off()
x <- 150:450
trials <- 400
midLatency <- 200
meanLatDif <- 25
devProp <- 0.1
meanSlope <- 0.03
beta <- rnorm(1,meanSlope,meanSlope)
alpha <- rnorm(1,midLatency,midLatency*devProp)*beta
delta_alpha <- rnorm(1,meanLatDif,meanLatDif*devProp)*beta
logistic <- function(x, beta, alpha, delta_alpha) 1/(1+exp(-(beta*x-alpha+delta_alpha/2)))
plot(x, logistic(x, beta, alpha, delta_alpha),type="l")
lines(x, logistic(x, beta, alpha, -delta_alpha))
dist1 <- rlnorm(trials,5.5,0.3)
dist2 <- rlnorm(trials,5.6,0.3)
resp1 <- c(1:length(dist1))
resp2 <- c(1:length(dist2))
ordering1 <- order(dist1)
ordering2 <- order(dist2)
for (i in 1:length(dist1)) {
resp1[i] <- (logistic(dist1[i], beta, alpha, delta_alpha) > runif(1))
resp2[i] <- (logistic(dist2[i], beta, alpha, -delta_alpha))
}
latencies1 <- dist1[ordering1]
orderResps1 <- resp1[ordering1]
latencies2 <- dist2[ordering2]
orderResps2 <- resp2[ordering2]
latBin1 <- c(); latBin2 <- c()
resBin1 <- c(); resBin2 <- c()
bins <- 5
binWidth <- length(latencies1)/bins
for (i in 1:bins) {
beginIndex <- 1 + (i-1)*binWidth
endIndex <- i*binWidth
latBin1[i] <- mean(latencies1[beginIndex:endIndex])
resBin1[i] <- mean(orderResps1[beginIndex:endIndex])
latBin2[i] <- mean(latencies2[beginIndex:endIndex])
resBin2[i] <- mean(orderResps2[beginIndex:endIndex])
}
points(latBin1, resBin1, p=0)
points(latBin2, resBin2, p=1)
dev.off()
x <- 150:450
trials <- 400
midLatency <- 200
meanLatDif <- 25
devProp <- 0.1
meanSlope <- 0.03
beta <- rnorm(1,meanSlope,meanSlope)
alpha <- rnorm(1,midLatency,midLatency*devProp)*beta
delta_alpha <- rnorm(1,meanLatDif,meanLatDif*devProp)*beta
logistic <- function(x, beta, alpha, delta_alpha) 1/(1+exp(-(beta*x-alpha+delta_alpha/2)))
plot(x, logistic(x, beta, alpha, delta_alpha),type="l")
lines(x, logistic(x, beta, alpha, -delta_alpha))
dist1 <- rlnorm(trials,5.5,0.3)
dist2 <- rlnorm(trials,5.6,0.3)
resp1 <- c(1:length(dist1))
resp2 <- c(1:length(dist2))
ordering1 <- order(dist1)
ordering2 <- order(dist2)
for (i in 1:length(dist1)) {
resp1[i] <- (logistic(dist1[i], beta, alpha, delta_alpha) > runif(1))
resp2[i] <- (logistic(dist2[i], beta, alpha, -delta_alpha))
}
latencies1 <- dist1[ordering1]
orderResps1 <- resp1[ordering1]
latencies2 <- dist2[ordering2]
orderResps2 <- resp2[ordering2]
latBin1 <- c(); latBin2 <- c()
resBin1 <- c(); resBin2 <- c()
bins <- 5
binWidth <- length(latencies1)/bins
for (i in 1:bins) {
beginIndex <- 1 + (i-1)*binWidth
endIndex <- i*binWidth
latBin1[i] <- mean(latencies1[beginIndex:endIndex])
resBin1[i] <- mean(orderResps1[beginIndex:endIndex])
latBin2[i] <- mean(latencies2[beginIndex:endIndex])
resBin2[i] <- mean(orderResps2[beginIndex:endIndex])
}
points(latBin1, resBin1, p=0)
points(latBin2, resBin2, p=1)
#################################################
############## GENERAL SETUP
#clear workspace:
rm(list=ls())
#set working directories
setwd("~/Dropbox/academia/experimentals/processing/analyse-process/ISA/mainExp/")
#load libraries
library(R2jags)
library(polspline)
library(stats)
library(plyr)
library(LaplacesDemon)
library(gridExtra)
library(ggplot2)
library(lattice)
library(coda)
library(superdiag)
#init constants coding (copied from matlab files)
CONDITION_REL <- 24; lockBinding("CONDITION_REL", globalenv())
CONDITION_IRR <- 22; lockBinding("CONDITION_IRR", globalenv())
#determine number of bins
numbBins <- 10
#init variables
priorwidth <- 0.707
nChains <- 15
nIter   <- 1000000
nBurn   <- 10000
nThin   <- 100
init.delta.alpha        <- -1; init.delta.alpha.sd <- 0.1
init.alpha              <- -5; init.alpha.sd       <- 0.5
init.beta               <- 0;  init.beta.sd        <- 0.05
#load data
expData <- read.table( "dataForR.dat", as.is=TRUE )
names(expData) <- c('subject','condition','latency','response')
#################################################
############## DATA PREPARATION
#number of subjects
nSubj         <- length( unique( expData$subject ) )
#recode response variable to [0,1]
expData$response <- mapvalues(expData$response, from = c("1", "3"), to = c("1", "0"))
#initialize list for trials per observer and condition
nTrials.conditionRel  <- rep(0, nSubj)
nTrials.conditionIrr  <- rep(0, nSubj)
subjectMeans          <- rep(0, nSubj)
#fill with number of trials
for(k in 1:nSubj){
subjectMeans[k] <- mean(expData$latency[expData$subject==k])
nTrials.conditionRel[k] <- with(expData, sum( subject==k & condition == CONDITION_REL ))
nTrials.conditionIrr[k] <- with(expData, sum( subject==k & condition == CONDITION_IRR ))
}
#get the maximum number of trials per condition/observer
nMaxRel = max( nTrials.conditionRel )
nMaxIrr = max( nTrials.conditionIrr )
#create data array for JAGS
lat.conditionRel  <- array( dim=c(nSubj,nMaxRel) )
resp.conditionRel <- array( dim=c(nSubj,nMaxRel) )
lat.conditionIrr  <- array( dim=c(nSubj,nMaxIrr) )
resp.conditionIrr <- array( dim=c(nSubj,nMaxIrr) )
for(k in 1:nSubj) {
lat.conditionRel[ k, 1:nTrials.conditionRel[k] ] <- with(expData, latency[condition == CONDITION_REL & subject == k])
resp.conditionRel[ k, 1:nTrials.conditionRel[k] ] <- with(expData, response[condition == CONDITION_REL & subject == k])
lat.conditionIrr[ k, 1:nTrials.conditionIrr[k] ] <- with(expData, latency[condition == CONDITION_IRR & subject == k])
resp.conditionIrr[ k, 1:nTrials.conditionIrr[k] ] <- with(expData, response[condition == CONDITION_IRR & subject == k])
}
# put together
data <- list( "nSubj",
"subjectMeans",
"lat.conditionRel",
"lat.conditionIrr",
"resp.conditionRel",
"resp.conditionIrr",
"nTrials.conditionRel",
"nTrials.conditionIrr"
)
#################################################
############## CHAIN INITIALIZATION
#make sure random sequence is always the same
set.seed(1234)
#create list with (randomized) initial values
myInits <- replicate(nChains,
list( mu.delta.alpha = rnorm(1, mean=init.delta.alpha,sd=init.delta.alpha.sd),
mu.alpha = rnorm(1, mean=init.alpha,sd=init.alpha.sd),
mu.beta = rnorm(1, mean=init.beta,sd=init.beta.sd),
sigma.delta.alpha = 0.1,
sigma.alpha = 0.1,
sigma.beta = 0.1),
simplify =F)
#parameters to be monitored:
parameters <- c( "mu.delta.alpha",
"mu.alpha",
"mu.beta",
"delta.alpha",
"alpha",
"beta"
)
#################################################
############## GIBBS SAMPLER
#go-go Gibbs!
samples <- jags( data,
inits = myInits,
parameters,
model.file = "jagsModel1A.txt",
n.chains = nChains,
n.iter = nIter,
n.burnin = nBurn,
n.thin = nThin
)
#################################################
############## GO-GO BAYES FACTORS
#fetch estimates
mu.delta.alpha  <- samples$BUGSoutput$sims.list$mu.delta.alpha
mu.alpha        <- samples$BUGSoutput$sims.list$mu.alpha
mu.beta         <- samples$BUGSoutput$sims.list$mu.beta
#compute Bayes factors in favor of H-SacReadiness
prior.dalphaSR <- dcauchy(0,scale=priorwidth)
post.dalphaSR  <- dlogspline(0, logspline(mu.delta.alpha))
BF.dalphaSR    <- post.dalphaSR/prior.dalphaSR
#compute Bayes factors in favor of H-VisProcessing
medianLatDif    <- median(with(expData,latency[condition==CONDITION_IRR]))-median(with(expData,latency[condition==CONDITION_REL]))
alphaOffset     <- medianLatDif * median(mu.beta)
prior.dalphaVP  <- dcauchy(alphaOffset,location=alphaOffset,scale=priorwidth)
post.dalphaVP   <- dlogspline(alphaOffset, logspline(mu.delta.alpha))
BF.dalphaVP     <- post.dalphaVP/prior.dalphaVP
#bayes factor comparing one against the other
BF.dalphaSRVP <- BF.dalphaSR / BF.dalphaVP
#for storing
bayesFactors <- list(bfSR=BF.dalphaSR, bfVP=BF.dalphaVP, bfSRVP=BF.dalphaSRVP )
#################################################
############## CALCULATE BINS FOR PLOTTING
for( k in 1:nSubj ) {
expData$latency[expData$subject==k] <- expData$latency[expData$subject==k] - subjectMeans[k]
}
#for each condition
conds <- c(CONDITION_IRR,CONDITION_REL)
for( cond in conds) {
latencyMatrix   <- matrix(nrow = numbBins, ncol = length(unique(expData$subject)))
performance     <- matrix(nrow = numbBins, ncol = length(unique(expData$subject)))
for( obsNum in as.double(unique(expData$subject)) ) {
obsSubset <- expData[expData$subject == obsNum & expData$condition==cond,]
orderList <- order(obsSubset$latency)
latList   <- obsSubset$latency[orderList]
perform   <- obsSubset$response[orderList] == 1
binSize  <- floor(length(latList)/numbBins)
for( bin in 1:numbBins ){
binStart  <- ((bin-1)*binSize+1)
binEnd    <- (bin*binSize)
latencyMatrix[bin,obsNum]   <- median(latList[binStart:binEnd])
performance[bin,obsNum]  <- mean(perform[binStart:binEnd])
}
}
if( cond == CONDITION_REL ) {
latBinsRel   <- apply(latencyMatrix, 1, mean)
perfBinsRel  <- apply(performance, 1, mean)
seBinsRel   <- apply(performance, 1, sd)/sqrt(nSubj-1)
indLatBinsRel   <- latencyMatrix
indPerfBinsRel  <- performance
} else if( cond == CONDITION_IRR ) {
latBinsIrr   <- apply(latencyMatrix, 1, mean)
perfBinsIrr  <- apply(performance, 1, mean)
seBinsIrr   <- apply(performance, 1, sd)/sqrt(nSubj-1)
indLatBinsIrr   <- latencyMatrix
indPerfBinsIrr  <- performance
}
}
performanceFrame <- data.frame(latBins=c(latBinsIrr,latBinsRel),perfBins=c(perfBinsIrr,perfBinsRel),coding=as.factor(c(rep(1,length(latBinsRel)),rep(2,length(latBinsRel)))))
jagsRawData   <- data.frame(mu.delta.alpha=mu.delta.alpha,mu.alpha=mu.alpha,mu.beta=mu.beta)
jagsHypData   <- data.frame(postSR=post.dalphaSR,priorSR=prior.dalphaSR,postVP=post.dalphaVP,priorVP=prior.dalphaVP)
save(jagsRawData,jagsHypData,bayesFactors,performanceFrame,subjectMeans,alphaOffset,file="outputs/jagsOutput1A.rData")
#if we're running on the server we save the whole data-file for safekeeping
if( dir.exists("outputs/serverOnly/")) {
save(samples,file="outputs/serverOnly/samples.rData")
}
load('outputs/serverOnly/samples.rData')
samplesMCMC <- as.mcmc(samples)
pdf("outputs/markovChains1A.pdf")
plot(samplesMCMC)
dev.off()
pdf("outputs/densityPlots1A.pdf")
densityplot(samplesMCMC, layout = c(1, 1), as.table = TRUE, aspect = "fill")
dev.off()
pdf("outputs/chainPlots1A.pdf")
traceplot(samplesMCMC)
dev.off()
pdf("outputs/logSplineEst1A.pdf")
xDeltaAlphaRange <- seq(-2.5,2.5,0.01)
outH <- hist(mu.delta.alpha,breaks=xDeltaAlphaRange)
distrDens  <- dlogspline(xDeltaAlphaRange, logspline(mu.delta.alpha))
scalar <- max(outH$counts)/max(distrDens)
lines(xDeltaAlphaRange,distrDens*scalar,col="red",lwd=3)
xAlphaRange <- seq(-1,9,0.01)
outH <- hist(mu.alpha,breaks=xAlphaRange)
distrDens  <- dlogspline(xAlphaRange, logspline(mu.alpha))
scalar <- max(outH$counts)/max(distrDens)
lines(xAlphaRange,distrDens*scalar,col="red",lwd=3)
xBetaRange <- seq(-0.1,0.22,0.0005)
outH <- hist(mu.beta,breaks=xBetaRange)
distrDens  <- dlogspline(xBetaRange, logspline(mu.beta))
scalar <- max(outH$counts)/max(distrDens)
lines(xBetaRange,distrDens*scalar,col="red",lwd=3)
dev.off()
sink("outputs/output1A.log")
summary(samplesMCMC)
superdiag(samplesMCMC,burnin=10)
print(samples)
sink()
repeats <- 100  # Number of MC reps
n       <- 10  # Sample size
data.mu    <- 1  # True value of mu
generator_sigma <- 1    # Error standard devation
prior.mu <- 0    # Prior for mu
prior.sd <- Inf
upper <- rep(0, repeats)
lower <- rep(0, repeats)
set.seed(020)
for (rep in 1:repeats) {
#Generate data:
Y <- rnorm(n, data.mu, generator_sigma)
#Compute posterior 95% interval:
post.var <- 1/(n/generator_sigma^2+1/prior.sd^2)
post.mu  <- post.var*(prior.mu/prior.sd^2+sum(Y)/generator_sigma^2)
#lower and upper bound of posterior
lower[rep]   <- post.mu-1.96*sqrt(post.var)
upper[rep]   <- post.mu+1.96*sqrt(post.var)
}
plot(NA, xlim=c(-1,1), ylim=c(1,repeats), xlab="95% credible interval", ylab="Iteration")
abline(v=0)
for (rep in 1:repeats) {
reject <- lower[rep]>0 | upper[rep]<0
lines(c(lower[rep],upper[rep]),c(rep,rep),col=ifelse(reject>0,2,1))
}
mean(lower > 0 | upper < 0)
rlnorm(10000,10,1)
dist <- rlnorm(10000,10,1)
mean(dist)
ln(mean(dist))
log(mean(dis))
log(mean(dist))
mean(log(dist))
mean(log(dist))
dist <- rlnorm(1000000,10,1)
mean(log(dist))
log(mean(dist))
mean(log(dist))
rlnorm(100000,log(200),1)
rlnorm(100000,log(220),1)
mean(rlnorm(100000,log(200),1))
mean(rlnorm(100000,log(220),1))
mean(log(rlnorm(100000,log(200),1)))
mean(log(rlnorm(100000,log(220),1)))
par(mfrow=c(1,2))
hist(dist1)
hist(dist2)
dist1 <- rlnorm(100000,log(200),0.3)
dist2 <- rlnorm(100000,log(220),0.3)
par(mfrow=c(1,2))
hist(dist1)
hist(dist2)
dist1 <- rlnorm(100000,log(200),0.3)
dist2 <- rlnorm(100000,log(220),0.3)
par(mfrow=c(1,2))
hist1 <- hist(dist1)
hist2 <- hist(dist2)
plot(hist1)
plot(hist2)
par(mfrow=c(2,1))
hist1 <- hist(dist1)
hist2 <- hist(dist2)
plot(hist1)
plot(hist2)
plot(hist1)
plot(hist2)
plot(hist1$mids, hist1$density)
plot(hist2$mids, hist2$density)
plot(hist1$mids, hist1$density, type="l")
plot(hist2$mids, hist2$density, type="l")
par(mfrow=c(1,2))
hist1 <- hist(dist1)
hist2 <- hist(dist2)
plot(hist1$mids, hist1$density, type="l")
plot(hist2$mids, hist2$density, type="l")
max(hist1$density)
output <- max(hist1$density)
output
plot(hist1$mids, hist1$density, type="l")
lines([200 200],[0 1], col="r")
plot(hist2$mids, hist2$density, type="l")
lines([220 220],[0 1], col="r")
par(mfrow=c(1,2))
hist1 <- hist(dist1)
hist2 <- hist(dist2)
plot(hist1$mids, hist1$density, type="l")
lines(c(200, 200),c(0, 1), col="r")
plot(hist2$mids, hist2$density, type="l")
lines(c(220, 220),c(0, 1), col="r")
par(mfrow=c(1,2))
hist1 <- hist(dist1)
hist2 <- hist(dist2)
plot(hist1$mids, hist1$density, type="l")
lines(c(200, 200),c(0, 1), col="r")
plot(hist2$mids, hist2$density, type="l")
lines(c(220, 220),c(0, 1), col="r")
plot(hist1$mids, hist1$density, type="l")
lines(c(200, 200),c(0, 1), col="red")
plot(hist2$mids, hist2$density, type="l")
lines(c(220, 220),c(0, 1), col="red")
mean(dist1)
mean(dist2)
median(dist1)
median(dist2)
dist1 <- rlnorm(100000,log(meanFast),0.5)
dist2 <- rlnorm(100000,log(meanSlow),0.5)
meanFast <- 230
meanSlow <- 255
par(mfrow=c(1,2))
hist1 <- hist(dist1)
hist2 <- hist(dist2)
plot(hist1$mids, hist1$density, type="l")
lines(c(meanFast, meanFast),c(0, 1), col="red")
plot(hist2$mids, hist2$density, type="l")
lines(c(meanSlow, meanSlow),c(0, 1), col="red")
meanFast <- 230
meanSlow <- 255
dist1 <- rlnorm(100000,log(meanFast),0.5)
dist2 <- rlnorm(100000,log(meanSlow),0.5)
par(mfrow=c(1,2))
hist1 <- hist(dist1)
hist2 <- hist(dist2)
plot(hist1$mids, hist1$density, type="l")
lines(c(meanFast, meanFast),c(0, 1), col="red")
plot(hist2$mids, hist2$density, type="l")
lines(c(meanSlow, meanSlow),c(0, 1), col="red")
meanFast <- 230
meanSlow <- 255
dist1 <- rlnorm(100000,log(meanFast),0.25)
dist2 <- rlnorm(100000,log(meanSlow),0.25)
par(mfrow=c(1,2))
hist1 <- hist(dist1)
hist2 <- hist(dist2)
plot(hist1$mids, hist1$density, type="l")
lines(c(meanFast, meanFast),c(0, 1), col="red")
plot(hist2$mids, hist2$density, type="l")
lines(c(meanSlow, meanSlow),c(0, 1), col="red")
meanFast <- 230
meanSlow <- 255
dist1 <- rlnorm(100000,log(meanFast),0.3)
dist2 <- rlnorm(100000,log(meanSlow),0.3)
par(mfrow=c(1,2))
hist1 <- hist(dist1)
hist2 <- hist(dist2)
plot(hist1$mids, hist1$density, type="l")
lines(c(meanFast, meanFast),c(0, 1), col="red")
plot(hist2$mids, hist2$density, type="l")
lines(c(meanSlow, meanSlow),c(0, 1), col="red")
simulations <- 20
for( index in 1:simulations ) {
load(bayesFactors,file=paste("outputs/obsSim/bayesFactors/bayesFactors", i, ".rData", sep=""))
print(paste("Bayes Factor mix:", bayesFactors$mix))
}
for( index in 1:simulations ) {
load(bayesFactors,file=paste("outputs/obsSim/bayesFactors/bayesFactors", index, ".rData", sep=""))
print(paste("Bayes Factor mix:", bayesFactors$mix))
}
setwd("~/Dropbox/academia/experimentals/processing/analyse-process/ISA/Exp1A/")
for( index in 1:simulations ) {
load(bayesFactors,file=paste("outputs/obsSim/bayesFactors/bayesFactors", index, ".rData", sep=""))
print(paste("Bayes Factor mix:", bayesFactors$mix))
}
for( index in 1:simulations ) {
load(file=paste("outputs/obsSim/bayesFactors/bayesFactors", index, ".rData", sep=""))
print(paste("Bayes Factor mix:", bayesFactors$mix))
}
for( index in 1:simulations ) {
load(file=paste("outputs/obsSim/bayesFactors/bayesFactors", index, ".rData", sep=""))
print(bayesFactors$mix)
}
for( index in 1:simulations ) {
load(file=paste("outputs/obsSim/bayesFactors/bayesFactors", index, ".rData", sep=""))
print(paste("Bayes mix:", bayesFactors$mix$bfSRVP))
}
for( index in 1:simulations ) {
load(file=paste("outputs/obsSim/bayesFactors/bayesFactors", index, ".rData", sep=""))
print(paste("Bayes mix:", bayesFactors$mix$bfSRVP))
}
for( index in 1:simulations ) {
load(file=paste("outputs/obsSim/bayesFactors/bayesFactors", index, ".rData", sep=""))
print(paste("Bayes vtd:", 1/bayesFactors$mix$bfSRVP))
print(paste("Bayes sr:", bayesFactors$sr$bfSRVP))
}
for( index in 1:simulations ) {
load(file=paste("outputs/obsSim/bayesFactors/bayesFactors", index, ".rData", sep=""))
print(paste("Bayes mix:", bayesFactors$mix$bfSRVP))
}
for( index in 1:simulations ) {
load(file=paste("outputs/obsSim/bayesFactors/bayesFactors", index, ".rData", sep=""))
print(paste("Bayes vtd:", 1/bayesFactors$vtd$bfSRVP))
print(paste("Bayes sr:", bayesFactors$sr$bfSRVP))
}
